import pandas as pd
from utils.audio_features import audio_pairplot, comparison_scatter_plot, top_and_bottom_lists
from utils.path import errors_path, pairplot_path, playlist_path, playlists_comparison_scatterplot_path, readme_path
from utils.settings import output_dir
from utils.util import md_image, md_link, spotify_link

def make_readme(playlists: pd.DataFrame, playlist_track: pd.DataFrame, tracks_full: pd.DataFrame):
    print("Generating Overview")

    readme = []

    readme += title("jbrown1618")
    readme += byline()
    readme += liked_songs()
    readme += errors()
    readme += playlists_section(playlists, playlist_track, tracks_full)
    readme += audio_features_section(tracks_full)

    with open(readme_path(), "w") as f:
        f.write("\n".join(readme))


def title(user: str):
    return [f"# Spotify Summary for {user}", ""]


def byline():
    return [f"Generated by {md_link('jbrown1618/spotify-stats', 'https://github.com/jbrown1618/spotify-stats')}", ""]


def liked_songs():
    return ["## Liked Songs", md_link("Liked Songs", playlist_path("Liked Songs", output_dir()))]


def errors():
    return ['## Possible organizational errors', md_link("Possible organizational errors", errors_path(output_dir()))]


def playlists_section(playlists: pd.DataFrame, playlist_track: pd.DataFrame, tracks_full: pd.DataFrame):
    track_counts = pd\
        .merge(left=playlists, right=playlist_track, left_on="playlist_uri", right_on="playlist_uri", how="inner")\
        .groupby("playlist_uri")\
        .agg({"track_uri": "count"})\
        .reset_index()

    display_playlists = pd\
        .merge(left=playlists, right=track_counts, left_on="playlist_uri", right_on="playlist_uri", how="inner")

    display_playlists["ðŸ”—"] = display_playlists["playlist_uri"].apply(lambda uri: spotify_link(uri))
    display_playlists["Name"] = display_playlists["playlist_name"].apply(lambda name: md_link(name, playlist_path(name, output_dir())))
    display_playlists["Number of Songs"] = display_playlists["track_uri"]
    display_playlists["Art"] = display_playlists["playlist_image_url"].apply(lambda src: md_image("", src, 50))

    display_playlists = display_playlists[["Art", "Name", "Number of Songs", "ðŸ”—"]]

    display_playlists.sort_values(by="Name", inplace=True)

    table = display_playlists.to_markdown(index=False)

    playlists_sorted_by_track_count = track_counts.sort_values(by="track_uri", ascending=False)["playlist_uri"]
    main_playlist_col = tracks_full["track_uri"].apply(lambda track_uri: get_main_playlist(track_uri, playlist_track, playlists, playlists_sorted_by_track_count))

    return [
        "## Playlists", 
        "", 
        table, 
        "", 
        comparison_scatter_plot(tracks_full, main_playlist_col, "Playlist", playlists_comparison_scatterplot_path(), playlists_comparison_scatterplot_path(output_dir())),
        ""
    ]


def get_main_playlist(track_uri: str, playlist_track: pd.DataFrame, playlists: pd.DataFrame, playlists_sorted_by_track_count):
    playlist_uris = set(playlist_track[playlist_track["track_uri"] == track_uri]["playlist_uri"])
    for playlist_uri in playlists_sorted_by_track_count:
        if playlist_uri in playlist_uris:
            return playlists[playlists["playlist_uri"] == playlist_uri].iloc[0]["playlist_name"]
    return "None"



def audio_features_section(tracks_full):
    return [
        "## Audio Features", 
        "", 
        audio_pairplot(tracks_full, pairplot_path(), pairplot_path(output_dir())), 
        ""
    ] + top_and_bottom_lists(tracks_full)
